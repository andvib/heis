package event

import(".././queue/"
		"time"
		".././heis/"
		".././network/")

var State string    //IDLE, MOVING, DOOR_OPEN
var Event string    //NEW_ORDER, ORDERED_FLOOR_REACHED, EMPTY_QUEUE
var EventFloor int
var Floor int
var NextFloor int
var Dir string
var TimerMoving time.Time
var TimerDoor time.Time

func StateMachine(){
	startUp()
	for ; true ; {
		NextFloor = queue.NextInQ(Dir,Floor) 
		switch State {
	
		case "IDLE" :
			if Event == "NEW_ORDER"{
				println("NEWORDER")
				//New order in empty queue
				NextFloor = queue.NextInQ(Dir,Floor)

				if NextFloor == Floor {
					TimerDoor = time.Now()
					State = "DOOR_OPEN"

				}else{
					TimerMoving = time.Now()
					State = "MOVING"
					moveToFloor()
				}
				Event = ""
			}

		case "MOVING" :
			if Event == "NEW_FLOOR" {
				temp := driver.ELEV_get_floor_sensor_signal()

				if (temp != -1){
					Floor = temp
				}
				if (temp == NextFloor){
					//Ordered floor reached
					driver.ELEV_set_motor_direction(0)
					TimerDoor = time.Now()
					State = "DOOR_OPEN"
				}
			}

		case "DOOR_OPEN" :
			if (driver.ELEV_get_floor_sensor_signal() != -1){
				driver.ELEV_set_door_open_lamp(1)
				time.Sleep(3000*time.Millisecond)
				driver.ELEV_set_door_open_lamp(0)
				queue.RemoveOrder(Floor)
				NextFloor = queue.NextInQ(Dir,Floor)
				println(NextFloor)
			}			
			if (NextFloor != -1){
				TimerMoving = time.Now()
				State = "MOVING"
				moveToFloor()
			}else if (NextFloor == -1){
				State = "IDLE"
				Event = ""
			}
		}
		time.Sleep(10*time.Millisecond)
	}
}


func ReadEvents(){
	var event driver.FloorEvent

	//Reads timers for door and elevator moving to see if elevator is still operating
	for {
		if (time.Since(TimerMoving) > 20*time.Second) && (State == "MOVING"){
			println("Elevator not moving!")
			network.Alive = false
		}else if (time.Since(TimerDoor) > 20*time.Second) && (State == "DOOR_OPEN"){
			println("Door stuck!")
			network.Alive = false
		}else{
			network.Alive = true
		}

		//Reads events put on the event channel by queue-module and elev-module
		
		event = <- driver.ElevChan
		Event = event.Event
		EventFloor = event.Floor

		time.Sleep(10*time.Millisecond)
	}
}


/*func ReadEvent() {
	//Reads events put on the event channel by queue-module and elev-module
	var event driver.FloorEvent

	for ; true ; {
		event = <- driver.ElevChan
		Event = event.Event
		EventFloor = event.Floor
	}
}*/


func moveToFloor() {
	//Starts the elevator in the wanted direction
	if (NextFloor == -1) {
		return
	}

	if (Floor < NextFloor) {
		driver.ELEV_set_motor_direction(1)
		Dir = "U"
	}else if (Floor > NextFloor){
		driver.ELEV_set_motor_direction(-1)
		Dir = "D"
	}
}

func startUp() {
	//Ensures that the elevator starts in a known state
	println("STARTUP")
	driver.ELEV_set_motor_direction(-1)

	for ; driver.ELEV_get_floor_sensor_signal() == -1 ; {
	}

	driver.ELEV_set_motor_direction(0)

	Dir = "U"
	Floor = driver.ELEV_get_floor_sensor_signal()
	println("STARTUP EXIT")
}


